Section 3 Lesson 17: فهم كود بايثون الأساسي
مقدمة:
في هذا الدرس، سنقوم بتحليل قطعة قصيرة من كود بايثون سطرًا بسطر، موضحين كل جزء والغرض منه. يوضح هذا الكود كيفية العمل مع السلاسل النصية في بايثون.
موضوع الدرس:

سطر 1: تعيين المتغير

الكود: first_name = "ahmed"
الشرح: يقوم هذا السطر بتهيئة متغير باسم first_name ويعطيه القيمة النصية "ahmed".
الغرض: تستخدم المتغيرات في البرمجة لتخزين البيانات التي يمكن الإشارة إليها لاحقًا. هنا، نقوم بتخزين الاسم الأول لشخص ما.
مثال: إذا قمنا بتغيير القيمة إلى first_name = "John"، فإن first_name الآن ستمسك القيمة "John" بدلاً من "ahmed".
سطر 2: تعيين المتغير

الكود: last_name = 'sami'
الشرح: مشابه للسطر الأول، يقوم هذا السطر بإنشاء متغير آخر باسم last_name ويعطيه القيمة النصية 'sami'.
الغرض: يحتفظ هذا المتغير باسم العائلة لشخص ما. يمكن استخدام علامات الاقتباس المفردة أو المزدوجة في بايثون لتمثيل السلاسل النصية بشكل متبادل.
مثال: إذا كان لدينا last_name = "Doe"، فإن last_name ستحتوي الآن على القيمة "Doe".
سطر 3: تعليق

الكود: # print(type(last_name))
الشرح: هذا السطر هو تعليق، يتم تجاهله بواسطة مترجم بايثون. يُستخدم لتقديم الشروحات أو الملاحظات داخل الكود.
الغرض: تساعد التعليقات المطورين الآخرين (أو نفسك في المستقبل) على فهم ما يقوم به الكود. السطر المعلق، إذا تم إلغاء تعليقه، سيطبع نوع المتغير last_name.
مثال: إذا قمنا بإزالة # وتشغيل print(type(last_name))، فإن الناتج سيكون <class 'str'>، مما يشير إلى أن last_name هو سلسلة نصية.
سطر 4: عبارة الطباعة

الكود: print(first_name + " " + last_name)
الشرح: يقوم هذا السطر بطباعة القيمة المجمعة لـ first_name و last_name إلى وحدة التحكم، مع وجود فراغ بينهما.
الغرض: تُستخدم دالة print() لعرض المعلومات على المستخدم. يتم استخدام عملية الجمع (+) لدمج السلاسل النصية معًا.
مثال: إذا قمنا بتشغيل هذا السطر كما هو، فسيكون الناتج ahmed sami. إذا قمنا بتغيير first_name إلى "John" و last_name إلى "Doe"، فسيكون الناتج John Doe.

خاتمة:
في هذه القطعة البسيطة من الكود، تعلمنا كيفية إنشاء ومعالجة متغيرات السلاسل النصية في بايثون. قمنا بتعيين القيم للمتغيرات، واستخدمنا التعليقات لتوضيح الأمور، وطبعنا النتيجة المجمعة إلى وحدة التحكم. إن فهم هذه الأساسيات أمر ضروري لبناء برامج أكثر تعقيدًا.