العنوان: القسم 5، الدرس 26 - فهم الدوال في بايثون

صباح الخير، أصدقائي!
اليوم، سنقوم بتحليل دوال بايثون سطرًا بسطر. أفهم أهمية الوضوح، خاصة مع دالة send_mail، التي قد تكون معقدة بعض الشيء. دعونا نستعرض كل دالة بعناية.

1. دالة say_hello (مدخل المستخدم)
def say_hello():
شرح:

هذا السطر يعرف دالة تسمى say_hello. الكلمة المفتاحية def تشير إلى أننا نقدم دالة جديدة.

    name = input("your name is: ")
شرح:

هذا السطر يطلب من المستخدم إدخال اسمه. دالة input() تنتظر إدخال المستخدم وتعينه للمتغير name.

مثال:

إذا كتب المستخدم "أحمد"، فإن المتغير name سيحتوي الآن على القيمة "أحمد".

    print("hello " + name)
شرح:

هذا السطر يطبع رسالة ترحيب تتضمن الاسم المدخل من قبل المستخدم. يستخدم العامل + لدمج السلسلة "hello " مع قيمة name.

مثال:

إذا أدخل المستخدم "أحمد"، سيكون الناتج:

  hello أحمد
say_hello()
شرح:

هذا السطر يستدعي دالة say_hello، مما ينفذ كل التعليمات الموجودة فيها.


2. دالة say_hello (مع معلمة)
def say_hello(name):
شرح:

هذا السطر يعرف نسخة جديدة من دالة say_hello، الآن تأخذ معلمة واحدة باسم name.

    print("hello " + name)
شرح:

مشابه لما سبق، هذا السطر يطبع ترحيبًا باستخدام المعلمة name المرسلة عند استدعاء الدالة.

مثال على الاستدعاءات:
say_hello("ahmed")

سيكون الناتج:

  hello ahmed
say_hello("sara")

سيكون الناتج:

  hello sara
say_hello("mahmoud")

سيكون الناتج:

  hello mahmoud

3. دالة لحساب مجموع رقمين
def some(num1, num2):
شرح:

هذا السطر يعرف دالة باسم some، التي تأخذ معلمين: num1 و num2.

    print(num1 + num2)
شرح:

هذا السطر يطبع مجموع num1 و num2.

مثال على الاستدعاءات:
some(12, 12)

سيكون الناتج:

  24
some(31, 15)

سيكون الناتج:

  46

4. دالة لحساب مربع رقم
def square(n):
شرح:

هذا السطر يعرف دالة باسم square، التي تأخذ معلمة واحدة n.

    print(n * n)
شرح:

هذا السطر يطبع مربع الرقم n.

مثال على الاستدعاءات:
square(4)

سيكون الناتج:

  16
square(24)

سيكون الناتج:

  576

5. دالة send_mail (الإصدار الأول)
def send_mail(to, sup, message):
شرح:

هذا السطر يعرف دالة باسم send_mail، التي تأخذ ثلاثة معلمات: to، sup، وmessage. هنا، to هو البريد الإلكتروني للمرسل إليه، وsup هو الموضوع، وmessage هو محتوى البريد الإلكتروني.

    print(f`mail to {to} the supgejk i {sep=} ahme sami {message}`)
شرح:

هذا السطر يحاول طباعة رسالة حول إرسال بريد إلكتروني. ومع ذلك، هناك أخطاء في التركيب، مثل استخدام الأزرار الخلفية وأخطاء في الإملاء.


6. دالة send_mail (الإصدار المصحح)
def send_mail(to, sub, message):
شرح:

هذا السطر يعرف دالة send_mail مرة أخرى، بشكل صحيح باستخدام sub كمعلمة للموضوع بدلاً من sup.

    print(f"sent mail to {to} the subject is {sub} the message is {message}")
شرح:

هذا السطر يطبع رسالة منسقة تشير إلى أن بريدًا إلكترونيًا قد تم إرساله، باستخدام المعلمات المقدمة.

مثال على الاستدعاء:
send_mail("ahmedsami11@gmail.com", "sup sup", "hi ahmed")

سيكون الناتج:

  sent mail to ahmedsami11@gmail.com the subject is sup sup the message is hi ahmed

7. دالة add_friend
def add_friend(*args):
شرح:

هذا السطر يعرف دالة باسم add_friend، التي يمكن أن تقبل عددًا متغيرًا من المعلمات باستخدام بناء الجملة *args.

    print(args)
شرح:

هذا السطر يطبع مجموعة args، التي تحتوي على جميع المعلمات المرسلة إلى الدالة.

    print(type(args))
شرح:

هذا السطر يطبع نوع args، والذي سيكون دائمًا <class 'tuple'> لأن *args تجمع جميع المعلمات في مجموعة.

مثال على الاستدعاء:
add_friend("ahmed", "mohamed", "noor", "jermaine", "sara")

سيكون الناتج:

  ('ahmed', 'mohamed', 'noor', 'jermaine', 'sara')
  <class 'tuple'>

الخاتمة
في هذا الدرس، قمنا بتحليل العديد من الدوال في بايثون، مع التركيز بشكل خاص على دالة send_mail وتسليط الضوء على مكوناتها. فهم كيفية بناء واستخدام الدوال أمر أساسي للبرمجة الفعالة.
إذا كان لديك أي أسئلة أخرى أو تحتاج إلى توضيح حول نقاط معينة، فلا تتردد في طرحها!