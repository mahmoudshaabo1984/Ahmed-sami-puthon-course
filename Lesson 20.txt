Section 4 Lesson 20: فهم قوائم بايثون
مقدمة:
في هذا الدرس، سنقوم بتحليل قطعة من كود بايثون التي توضح كيفية إنشاء ومعالجة القوائم. تعتبر القوائم واحدة من أكثر هياكل البيانات تنوعًا في بايثون، حيث تسمح لنا بتخزين عناصر متعددة في متغير واحد. سنقوم بتفكيك الكود سطرًا بسطر، موضحين كل جزء والغرض منه.
تحليل الكود:

السطر 1: تهيئة القائمة

الكود: nums = [1,2,3,4,5,6,7]
الشرح: يقوم هذا السطر بتهيئة قائمة باسم nums تحتوي على الأعداد من 1 إلى 7.
الغرض: تستخدم القوائم لتخزين قيم متعددة في متغير واحد، مما يجعل إدارة البيانات أسهل.
مثال: إذا قمنا بتغيير القائمة إلى nums = [1, 2, 3, 4, 5]، ستحتوي قائمة nums الآن على هذه الأعداد الخمسة فقط.
السطر 2: عبارة الطباعة

الكود: print(nums)
الشرح: يقوم هذا السطر بطباعة محتويات قائمة nums إلى وحدة التحكم.
الغرض: تُستخدم دالة print() لعرض المعلومات على المستخدم، مما يسمح لنا برؤية محتويات القائمة.
مثال: إذا قمنا بتشغيل هذا السطر، سيكون الناتج [1, 2, 3, 4, 5, 6, 7].
السطر 3: قائمة من السلاسل النصية

الكود: names = ["ahmed","jermaine","mycle","mohamed"]
الشرح: يقوم هذا السطر بإنشاء قائمة باسم names تحتوي على أربعة عناصر نصية.
الغرض: يمكن أن تحتوي القوائم على عناصر من أنواع بيانات مختلفة، مثل السلاسل النصية والأعداد وغيرها. هنا، نقوم بتخزين الأسماء.
مثال: إذا قمنا بتغيير القائمة إلى names = ["Alice", "Bob"]، ستحتوي الآن على هذين الاسمين فقط.
السطر 4: عبارة الطباعة

الكود: print(names)
الشرح: يقوم هذا السطر بطباعة محتويات قائمة names إلى وحدة التحكم.
الغرض: للسماح لنا برؤية الأسماء المخزنة حاليًا في القائمة.
مثال: تشغيل هذا السطر سيعطي الناتج ["ahmed", "jermaine", "mycle", "mohamed"].
السطر 5: أنواع بيانات مختلطة في قائمة

الكود: l1 = ["sara", 12, "ahmed", True, 5.24]
الشرح: يقوم هذا السطر بتهيئة قائمة باسم l1 تحتوي على أنواع بيانات مختلطة: سلاسل نصية، عدد صحيح، قيمة منطقية، وعدد عشري.
الغرض: يمكن أن تحتوي القوائم على أنواع بيانات مختلفة، مما يوفر مرونة في إدارة البيانات.
مثال: إذا أضفنا عنصرًا آخر مثل l1.append("new_item")، ستتضمن الآن "new_item" في القائمة.
السطر 6: عبارة الطباعة

الكود: print(l1)
الشرح: يقوم هذا السطر بطباعة محتويات قائمة l1 إلى وحدة التحكم.
الغرض: لتوفير رؤية حول أنواع البيانات المختلطة المخزنة في القائمة.
مثال: سيكون الناتج ["sara", 12, "ahmed", True, 5.24].
السطر 7: تهيئة قائمة الفواكه

الكود: fruits = ["banana", "apple", "mango", "grapes"]
الشرح: يقوم هذا السطر بإنشاء قائمة باسم fruits تحتوي على أسماء أربع فواكه مختلفة.
الغرض: لتوضيح كيفية إنشاء قائمة مخصصة لتخزين أسماء الفواكه.
مثال: إذا قمنا بتغيير القائمة إلى fruits = ["orange", "kiwi"]، ستحتوي الآن على هذين النوعين من الفواكه فقط.
السطر 8: عبارة الطباعة

الكود: print(fruits)
الشرح: يقوم هذا السطر بطباعة محتويات قائمة fruits إلى وحدة التحكم.
الغرض: للسماح لنا برؤية أسماء الفواكه المخزنة حاليًا في القائمة.
مثال: تشغيل هذا السطر سيعطي الناتج ["banana", "apple", "mango", "grapes"].
السطر 9: الوصول إلى قيم القائمة

الكود: print(fruits[1])
الشرح: يقوم هذا السطر بالوصول إلى العنصر الثاني في قائمة fruits (الفهرس 1، حيث يبدأ الفهرس من 0).
الغرض: لتوضيح كيفية استرجاع عناصر معينة من القائمة باستخدام فهرسها.
مثال: في هذه الحالة، سيكون الناتج apple.
السطر 10: طول القائمة

الكود: print(len(fruits))
الشرح: يقوم هذا السطر بطباعة طول قائمة fruits، والذي يمثل عدد العناصر الموجودة فيها.
الغرض: لإظهار كيفية تحديد حجم القائمة.
مثال: إذا كانت قائمة fruits تحتوي على أربعة عناصر، سيكون الناتج 4.
السطر 11: مُنشئ القوائم

الكود: l2 = list((12, 144, "yousef", False))
الشرح: يقوم هذا السطر بإنشاء قائمة باسم l2 باستخدام مُنشئ list() مع تقديم tuple كوسيط.
الغرض: لتوضيح كيفية إنشاء قائمة من أنواع بيانات أخرى قابلة للتكرار.
مثال: سيكون الناتج عند الطباعة print(l2) هو [12, 144, "yousef", False].
السطر 12: عبارة الطباعة

الكود: print(l2)
الشرح: يقوم هذا السطر بطباعة محتويات قائمة l2 إلى وحدة التحكم.
الغرض: لتوفير رؤية حول العناصر التي تم إنشاؤها في قائمة l2.
مثال: سيكون الناتج [12, 144, "yousef", False].

خاتمة:
في هذا الدرس، استكشفنا أساسيات قوائم بايثون، بما في ذلك إنشاء القوائم، الوصول إلى العناصر، وتحديد طول القوائم. إن فهم كيفية العمل مع القوائم أمر ضروري لإدارة مجموعات البيانات بشكل فعال في بايثون. تقدم القوائم مرونة وسهولة في الاستخدام، مما يجعلها هيكل بيانات أساسي في البرمجة. مع تقدمنا، سنغوص أعمق في طرق القوائم والتلاعبات المتقدمة لتعزيز مهاراتنا في البرمجة.