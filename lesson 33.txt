
---

**القسم السابع الدرس 33: فهم الحلقات والتكرار في لغة البايثون**

**المقدمة**  
صباح الخير، أعزائي الطلاب. أنا الأستاذ أحمد سامي، وسنتناول اليوم موضوعًا أساسيًا في برمجة البايثون: الحلقات. سنقوم بتحليل نص برمجي يوضح استخدام حلقة `while` والطباعة المتكررة. بنهاية هذه المحاضرة، ستتمكنون من فهم كيفية عمل الحلقات، وكيفية التحكم فيها، وتطبيقها في برامجكم. لنبدأ بفحص الكود سطرًا بسطر.

---

**العرض**  

### الجزء الأول: التكرار باستخدام أوامر الطباعة  
يبدأ الكود بفكرة بسيطة ولكنها أساسية: التكرار باستخدام أمر الطباعة `print`.  

```python
print("hello world")
print("hello world")
print("hello world")
print("hello world")
print("hello world")
```  

هنا، يتم طباعة العبارة `"hello world"` خمس مرات. بينما يعمل هذا الأسلوب، إلا أنه غير فعال. تخيلوا إذا أردنا طباعة هذه العبارة 100 أو 1000 مرة. كتابة أوامر طباعة فردية سيكون مملًا وغير عملي. هنا تأتي أهمية الحلقات.

---

### الجزء الثاني: مقدمة عن حلقة `while`  
تسمح لنا حلقة `while` بتكرار جزء من الكود طالما أن الشرط المحدد صحيح. لنفحص أول حلقة `while` في الكود:  

```python
i = 0
x = 100
while i < 10:
    print("hello world")
    i += 1
```  

- **التهيئة**: يتم تهيئة المتغير `i` بالقيمة `0`، ويتم تعيين `x` إلى `100`. لاحظوا أن `x` غير مستخدمة في هذه الحلقة، لذا فهي غير ذات صلة هنا.  
- **الشرط**: تستمر الحلقة طالما أن `i < 10`.  
- **التنفيذ**: داخل الحلقة، يتم طباعة `"hello world"`، ويتم زيادة `i` بمقدار `1` باستخدام `i += 1`.  
- **الإنهاء**: تتوقف الحلقة عندما تصل `i` إلى `10`، حيث يصبح الشرط `i < 10` غير صحيح.  

هذه الحلقة تطبع `"hello world"` exactly 10 مرات.  

---

### الجزء الثالث: تعديل شرط الحلقة  
بعد ذلك، يعرض الكود نسخة معدلة من الحلقة:  

```python
i = 0
x = 100
while i < 3:
    print("hello world")
    i += 1
```  

هنا، تم تغيير الشرط إلى `i < 3`. نتيجة لذلك، تعمل الحلقة فقط 3 مرات، وتطبع `"hello world"` ثلاث مرات. هذا يوضح كيف يؤثر تغيير شرط الحلقة على عدد التكرارات.

---

### الجزء الرابع: طباعة عداد الحلقة  
تقدم الحلقة التالية مفهومًا جديدًا: طباعة عداد الحلقة نفسه.  

```python
i = 0
x = 100
while i < 3:
    print(i)
    i += 1
```  

- بدلًا من طباعة `"hello world"`، تطبع هذه الحلقة قيمة `i`.  
- سيكون الناتج:  
  ```
  0
  1
  2
  ```  
- هذا مفيد لتتبع تقدم الحلقة أو إنشاء تسلسلات من الأرقام.

---

### الجزء الخامس: توسيع نطاق الحلقة  
المثال التالي يوسع نطاق الحلقة لتعمل 100 مرة:  

```python
i = 0
x = 100
while i < 100:
    print(i)
    i += 1
```  

- الشرط `i < 100` يضمن أن الحلقة تعمل 100 مرة.  
- سيكون الناتج أرقامًا من `0` إلى `99`.  
- هذا يوضح كيف يمكن للحلقات التعامل مع التكرار على نطاق واسع بكفاءة.

---

### الجزء السادس: استخدام متغير في شرط الحلقة  
أخيرًا، يعرض الكود كيفية استخدام متغير في شرط الحلقة:  

```python
i = 0
x = 100
while i < x:
    print(i)
    i += 1
```  

- هنا، الشرط `i < x` يستخدم المتغير `x`، الذي تم تعيينه إلى `100`.  
- تعمل هذه الحلقة بنفس طريقة الحلقة السابقة، حيث تطبع أرقامًا من `0` إلى `99`.  
- استخدام المتغيرات في الشروط يجعل الكود أكثر مرونة وديناميكية.

---

**الخاتمة**  
باختصار، الحلقات هي أداة قوية في البايثون تسمح لك بتكرار الكود بكفاءة. حلقة `while` مفيدة بشكل خاص عندما يعتمد عدد التكرارات على شرط معين. بفهم كيفية تهيئة الحلقات والتحكم فيها وإنهائها، يمكنكم كتابة برامج أكثر إيجازًا وفعالية.  

أشجعكم على تجربة الكود الذي ناقشناه اليوم. حاولوا تغيير شروط الحلقة، أو تعديل العداد، أو حتى دمج الحلقات مع ميزات أخرى في البايثون. إذا كانت لديكم أي أسئلة، فلا تترددوا في طرحها. شكرًا لكم على انتباهكم، وأتطلع إلى لقائنا في الجلسة القادمة.

---

**نهاية المحاضرة**  

