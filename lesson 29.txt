القسم 5، الدرس 29: القواميس في برمجة بايثون

صباح الخير، طلاب!
اليوم، سنستكشف مفهوم القواميس في بايثون، وهي هياكل بيانات متعددة الاستخدامات تسمح لنا بتخزين البيانات في تنسيق مفتاح-قيمة. أنا أحمد سامي، وسأشرح لكم الكود المقدم سطرًا بسطر، مع تسليط الضوء على الميزات الرئيسية والوظائف للقواميس.

فهم القواميس

التعريف:
القاموس هو مجموعة غير مرتبة، قابلة للتغيير، ومؤشر عليها. لا يسمح بوجود عناصر مكررة.

# تعريف القاموس 'person' مع أزواج المفتاح-القيمة الأولية
person = {
    "first_name": "ahmed",
    "last_name": "samy",
    "age": 31
}

الشرح:
هنا، نقوم بتعريف قاموس باسم person يحتوي على ثلاثة أزواج مفتاح-قيمة: first_name، last_name، وage.
المفاتيح هي سلاسل نصية، والقيم هي البيانات المقابلة لها.



الوصول إلى القيم:

print(person["first_name"])  # يطبع القيمة المرتبطة بـ "first_name"
print(person.get("last_name"))  # يحصل على القيمة المرتبطة بـ "last_name" باستخدام get()

الشرح:
السطر الأول يصل إلى قيمة المفتاح first_name مباشرة باستخدام الأقواس المربعة.
السطر الثاني يستخدم طريقة .get()، وهي طريقة أكثر أمانًا للحصول على القيم لأنها تعيد None إذا لم يكن المفتاح موجودًا.



إنشاء قاموس باستخدام مُنشئ dict():

person2 = dict(f_name="sara", l_name="wileam")

الشرح:
هذه السطر ينشئ قاموسًا آخر يسمى person2 باستخدام دالة dict()، حيث يتم توفير المفاتيح وقيمها المقابلة كوسائط.



إضافة زوج مفتاح-قيمة جديد:

person["phone"] = "12345678"
print(person)  # يطبع قاموس 'person' لتأكيد إضافة المفتاح 'phone'

الشرح:
نحن نضيف زوج مفتاح-قيمة جديد phone إلى قاموس person، ثم نطبع القاموس لتأكيد الإضافة.



عرض مفاتيح القاموس:

print(person.keys())

الشرح:
هذه السطر يطبع جميع المفاتيح في قاموس person، مما يمكن أن يكون مفيدًا لفهم البيانات المتاحة.



عرض عناصر القاموس:

print(person.items())

الشرح:
هذه السطر يطبع جميع أزواج المفتاح-القيمة في القاموس، مما يسمح لنا برؤية المحتويات بالكامل في وقت واحد.



نسخ قاموس:

person3 = person.copy()
print(person3)  # يطبع 'person3' لتأكيد أنها تحتوي على نفس أزواج المفتاح-القيمة مثل 'person'

الشرح:
هنا، نقوم بإنشاء نسخة من قاموس person يسمى person3. هذه الطريقة مفيدة عندما تريد الحفاظ على القاموس الأصلي دون تغيير.



إضافة زوج مفتاح-قيمة جديد إلى القاموس المنسوخ:

person3["city"] = "cairo"
print(person3)  # يطبع 'person3' لتأكيد إضافة المفتاح "city"

الشرح:
نحن نضيف زوج مفتاح-قيمة جديد city إلى person3، مما يؤكد أن التعديلات على person3 لا تؤثر على القاموس الأصلي person.



إزالة مفتاح:

del person3["city"]
print(person3)  # يطبع 'person3' لتأكيد حذف المفتاح "city"

الشرح:
هذه السطر يزيل المفتاح city من person3، ونقوم بطباعته لتأكيد الحذف.



استخدام طريقة pop():

person.pop("phone")
print(person)  # يطبع 'person' لتأكيد إزالة المفتاح "phone"

الشرح:
طريقة pop() تزيل المفتاح المحدد (phone) من القاموس وتعيد قيمته. ثم نطبع قاموس person لتأكيد الإزالة.



مسح القاموس:

person.clear()
print(person)  # يطبع 'person' لتأكيد أنه الآن قاموس فارغ

الشرح:
طريقة clear() تزيل جميع العناصر من القاموس، مما يجعله فارغًا. نقوم بطباعته لتأكيد ذلك.



الحصول على طول القاموس:

print(len(person3))  # يطبع عدد العناصر في 'person3'

الشرح:
هذه السطر يطبع عدد أزواج المفتاح-القيمة في قاموس person3، مما يكون مفيدًا لفهم حجمه.



قائمة من القواميس:

people = [
    {'name': 'Martha', 'age': 30},
    {'name': 'Kevin', 'age': 25}
]

الشرح:
هنا، نقوم بتعريف قائمة باسم people، حيث يمثل كل عنصر قاموس لشخص مع اسمه وعمره.


الوصول إلى عنصر في القائمة:

print(people[1]['name'])  # يطبع 'Kevin'

الشرح:
هذه السطر يصل إلى القاموس الثاني في قائمة people ويطبع الاسم (Kevin).


الخاتمة
في هذا الدرس، استكشفنا المفاهيم الأساسية للقواميس في بايثون، مع التركيز على كيفية تعريفها، والوصول إليها، وتعديلها، وإدارتها بفعالية. القواميس هي أدوات قوية لتنظيم البيانات بطريقة منظمة، مما يسمح بالاسترجاع والمعالجة بكفاءة. إذا كانت لديكم أي أسئلة أو تحتاجون إلى مزيد من التوضيح حول أي من النقاط التي ناقشناها، فلا تترددوا في طرحها. شكرًا لكم!