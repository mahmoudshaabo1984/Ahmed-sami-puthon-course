section 3 lesson 18في هذا الدرس، سنقوم بتفصيل الكود المقدم سطرًا بسطر. الغرض من هذا الكود هو توضيح طرق مختلفة لتنسيق وطباعة السلاسل النصية في بايثون، مع التركيز على استخدام المتغيرات للأسماء والأعمار.

name = "ahmed"

شرح أحمد: في هذا السطر، نقوم بتهيئة متغير باسم name ونعطيه القيمة النصية "ahmed". هذا المتغير سيحتوي على اسم الشخص الذي سنستخدمه لاحقًا في جمل الطباعة.
age = 27

شرح أحمد: في هذا السطر، نقوم بتهيئة متغير باسم age ونعطيه القيمة العددية 27. هذا المتغير سيحتوي على عمر الشخص الذي سنستخدمه أيضًا.
print("my name is ahmed I am 27 years old")

شرح أحمد: هذا السطر يقوم بطباعة السلسلة النصية مباشرة إلى الشاشة. يُظهر رسالة ثابتة تقدم الاسم والعمر دون استخدام المتغيرات.
# print("my name is ahmed I am 27 years old")

شرح أحمد: هذا السطر مُعلّق (يتم الإشارة إليه بـ #) لذا لن يتم تنفيذه. يبدو أنه للرجوع إليه أو لتوضيح كيفية طباعة نفس الرسالة مباشرة.
print("my name is {name} I am {age} years old".format(name=name, age=age ))

شرح أحمد: هذا السطر يطبع سلسلة نصية منسقة باستخدام دالة format(). يستخدم المتغيرات name و age لإدخال قيمهما بشكل ديناميكي في السلسلة، مما يسمح بإخراج أكثر مرونة.
# print("my name is {name} I am {age} years old".format(name=name, age=age ))

شرح أحمد: هذا السطر أيضًا مُعلّق ولن يتم تنفيذه. يشبه التعليق السابق، ويعمل كمرجع.
print("my name is {my_name} I am {my_age} years old".format(my_name=name, my_age=age ))

شرح أحمد: هذا السطر يطبع سلسلة نصية منسقة باستخدام دالة format() مع أسماء متغيرات مختلفة (my_name و my_age). يُظهر أننا يمكن أن نستخدم أسماء مختلفة للمتغيرات عند التنسيق.
name = "Mahmoud"

شرح أحمد: في هذا السطر، نقوم بتغيير قيمة المتغير name إلى "Mahmoud". هذا يوضح أن المتغيرات يمكن تحديثها.
age = 30

شرح أحمد: في هذا السطر، نقوم بتغيير قيمة المتغير age إلى 30. هذا يوضح أيضًا تحديث قيمة العمر.
print("my name is {my_name} I am {my_age} years old".format(my_name=name, my_age=age ))

شرح أحمد: هذا السطر يطبع القيم المحدثة لـ name و age باستخدام دالة format(). يُظهر الإخراج مع القيم الجديدة المُعينة.
# print("my name is {my_name} I am {my_age} years old".format(my_name=name, my_age=age ))

شرح أحمد: هذا السطر مُعلّق ولن يتم تنفيذه. يعمل أيضًا كمرجع.
name = "Mahmoud"

شرح أحمد: في هذا السطر، نقوم بتغيير قيمة المتغير name إلى "Mahmoud" مرة أخرى. هذا يُظهر إعادة تعيين المتغير.
age = 30

شرح أحمد: في هذا السطر، نقوم بتغيير قيمة المتغير age إلى 30 مرة أخرى. يُظهر إعادة تعيين العمر.
print(f"my name is {name} I am {age} years old")

شرح أحمد: هذا السطر يطبع سلسلة نصية منسقة باستخدام f-string (سلاسل نصية منسقة). يقدم طريقة أكثر اختصارًا وحداثة لإدراج التعبيرات مباشرة داخل السلاسل النصية.
name = "Mahmoud Shaabo"

شرح أحمد: في هذا السطر، نقوم بتغيير قيمة المتغير name إلى القيمة الجديدة "Mahmoud Shaabo". يُظهر تحديث المتغير مرة أخرى.
age = 35

شرح أحمد: في هذا السطر، نقوم بتغيير قيمة المتغير age إلى القيمة الجديدة 35. يُظهر تحديث العمر مرة أخرى.
# print("my name is {my_name} I am {my_age} years old".format(my_name=name, my_age=age ))

شرح أحمد: هذا السطر مُعلّق ولن يتم تنفيذه. يعمل كمرجع.
print(f"my name is {name} I am {age} years old")

شرح أحمد: هذا السطر يطبع القيم المحدثة لـ name و age مرة أخرى باستخدام f-string. يُظهر الإخراج مع أحدث القيم المُعينة للمتغيرات.

ملخص: يوضح الكود المقدم طرقًا مختلفة لتنسيق السلاسل النصية في بايثون، بما في ذلك السلاسل الثابتة، ودالة format(), و f-strings. يُظهر كيفية استخدام المتغيرات بشكل فعال لإنشاء مخرجات ديناميكية.