Section 3 Lesson 19: استكشاف طرق معالجة السلاسل النصية في بايثون
مقدمة:
في هذا الدرس، سنقوم باستكشاف مجموعة من طرق معالجة السلاسل النصية المتاحة في لغة البرمجة بايثون. إن فهم كيفية التعامل مع السلاسل النصية أمر مهم جدًا، حيث تُستخدم السلاسل النصية في العديد من التطبيقات. سيقوم الأخ أحمد سامي بشرح كل سطر من الكود، مع تقديم أمثلة توضيحية.
موضوع الدرس:

name = "ahmed"

الاستخدام: يقوم هذا السطر بتهيئة متغير باسم name ويعطيه القيمة النصية "ahmed".
الغرض: لتخزين اسم شخص يمكن استخدامه لاحقًا في البرنامج.
مثال: 
 name = "ahmed"
 print(name)  # الناتج: ahmed
s = "hello world"

الاستخدام: يقوم هذا السطر بتهيئة متغير باسم s ويعطيه القيمة النصية "hello world".
الغرض: لتحديد سلسلة نصية يتم استخدامها لعرض طرق مختلفة لمعالجة السلاسل.
مثال:
 s = "hello world"
 print(s)  # الناتج: hello world
# print(s)

الاستخدام: هذا السطر مُعلق (يشير إليه #) ولن يتم تنفيذه.
الغرض: يبدو أنه للإشارة إلى كيفية طباعة السلسلة s.
مثال: 
 # print(s)  # لن يتم الطباعة
# length

الاستخدام: تعليق يشير إلى أن السطر التالي سيحسب طول السلسلة.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(len(s))

الاستخدام: يقوم هذا السطر بطباعة طول السلسلة s باستخدام دالة len().
الغرض: لإظهار عدد الأحرف في السلسلة، والتي في هذه الحالة هي 11.
مثال:
 print(len(s))  # الناتج: 11
# capitalize

الاستخدام: تعليق يشير إلى أن السطر التالي سيحول الحرف الأول إلى حرف كبير.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.capitalize())

الاستخدام: يقوم هذا السطر بطباعة السلسلة s مع تحويل الحرف الأول إلى حرف كبير باستخدام دالة capitalize().
الغرض: لتنسيق السلسلة بحيث يكون الحرف الأول كبيرًا، مما يعطي نتيجة "Hello world".
مثال:
 print(s.capitalize())  # الناتج: Hello world
# upper case

الاستخدام: تعليق يشير إلى أن السطر التالي سيحول السلسلة إلى حروف كبيرة.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.upper())

الاستخدام: يقوم هذا السطر بطباعة السلسلة s بالكامل بحروف كبيرة باستخدام دالة upper().
الغرض: لتوضيح كيفية تحويل السلسلة بالكامل إلى حروف كبيرة، مما يعطي نتيجة "HELLO WORLD".
مثال:
 print(s.upper())  # الناتج: HELLO WORLD
# lower case

الاستخدام: تعليق يشير إلى أن السطر التالي سيحول السلسلة إلى حروف صغيرة.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.lower())

الاستخدام: يقوم هذا السطر بطباعة السلسلة s بالكامل بحروف صغيرة باستخدام دالة lower().
الغرض: لتوضيح كيفية تحويل السلسلة بالكامل إلى حروف صغيرة، مما يعطي نتيجة "hello world".
مثال:
  print(s.lower())  # الناتج: hello world
# swipe case

الاستخدام: تعليق يشير إلى أن السطر التالي سيبدل حالة الحروف.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.swapcase())

الاستخدام: يقوم هذا السطر بطباعة السلسلة s مع تبديل حالة كل حرف باستخدام دالة swapcase().
الغرض: لتوضيح كيفية تغيير حالة كل حرف في السلسلة، مما يعطي نتيجة "HELLO WORLD".
مثال:
  print(s.swapcase())  # الناتج: HELLO WORLD
# replace

الاستخدام: تعليق يشير إلى أن السطر التالي سيستبدل جزءًا من السلسلة.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.replace("world", "everyone"))

الاستخدام: يقوم هذا السطر بطباعة السلسلة s مع استبدال الجزء "world" بـ "everyone" باستخدام دالة replace().
الغرض: لتوضيح كيفية تعديل أجزاء من السلسلة، مما يعطي نتيجة "hello everyone".
مثال:
  print(s.replace("world", "everyone"))  # الناتج: hello everyone
# count character

الاستخدام: تعليق يشير إلى أن السطر التالي سيعد تكرار حرف معين.
الغرض: لتوضيح ما يقوم به السطر التالي.
char = "l"

الاستخدام: يقوم هذا السطر بتهيئة متغير باسم char ويعطيه الحرف "l".
الغرض: لتحديد حرف سيتم عد تكراراته في السلسلة s.
مثال:
  char = "l"
print(s.count(char))

الاستخدام: يقوم هذا السطر بطباعة عدد مرات ظهور الحرف المخزن في char في السلسلة s باستخدام دالة count().
الغرض: لتوضيح كيفية عد تكرارات حرف معين، والتي في هذه الحالة هي 3.
مثال:
  print(s.count(char))  # الناتج: 3
# startswith

الاستخدام: تعليق يشير إلى أن السطر التالي سيتحقق مما إذا كانت السلسلة تبدأ بجزء معين.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.startswith("he"))

الاستخدام: يقوم هذا السطر بطباعة قيمة منطقية تشير إلى ما إذا كانت السلسلة s تبدأ بالجزء "he" باستخدام دالة startswith().
الغرض: لتوضيح كيفية التحقق من بداية السلسلة، والتي تعود True.
مثال:
  print(s.startswith("he"))  # الناتج: True
# endswith

الاستخدام: تعليق يشير إلى أن السطر التالي سيتحقق مما إذا كانت السلسلة تنتهي بجزء معين.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.endswith("s"))

الاستخدام: يقوم هذا السطر بطباعة قيمة منطقية تشير إلى ما إذا كانت السلسلة s تنتهي بالجزء "s" باستخدام دالة endswith().
الغرض: لتوضيح كيفية التحقق من نهاية السلسلة، والتي تعود False.
مثال:
  print(s.endswith("s"))  # الناتج: False
# split

الاستخدام: تعليق يشير إلى أن السطر التالي سيقسم السلسلة إلى قائمة من الأجزاء.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.split())

الاستخدام: يقوم هذا السطر بطباعة قائمة من الأجزاء التي تم الحصول عليها من تقسيم السلسلة s باستخدام دالة split().
الغرض: لتوضيح كيفية فصل السلسلة إلى كلماتها الفردية، مما يعطي النتيجة ["hello", "world"].
مثال:
  print(s.split())  # الناتج: ['hello', 'world']
# find

الاستخدام: تعليق يشير إلى أن السطر التالي سيجد موضع جزء معين في السلسلة.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.find("d"))

الاستخدام: يقوم هذا السطر بطباعة فهرس أول ظهور للجزء "d" في السلسلة s باستخدام دالة find().
الغرض: لتوضيح كيفية تحديد موضع حرف معين في السلسلة، حيث تعود النتيجة 9.
مثال:
  print(s.find("d"))  # الناتج: 9
# Is all alphanumeric

الاستخدام: تعليق يشير إلى أن السطر التالي سيتحقق مما إذا كانت السلسلة تتكون فقط من أحرف وأرقام.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.isalnum())

الاستخدام: يقوم هذا السطر بطباعة قيمة منطقية تشير إلى ما إذا كانت السلسلة s تتكون فقط من أحرف وأرقام باستخدام دالة isalnum().
الغرض: لتوضيح كيفية التحقق مما إذا كانت السلسلة تحتوي فقط على أحرف وأرقام، والتي تعود False في هذه الحالة بسبب وجود فراغ.
# Is all alphabetic

الاستخدام: تعليق يشير إلى أن السطر التالي سيتحقق مما إذا كانت السلسلة تتكون فقط من أحرف.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.isalpha())

الاستخدام: يقوم هذا السطر بطباعة قيمة منطقية تشير إلى ما إذا كانت السلسلة s تتكون فقط من أحرف باستخدام دالة isalpha().
الغرض: لتوضيح كيفية التحقق مما إذا كانت السلسلة تحتوي فقط على أحرف، والتي تعود False في هذه الحالة بسبب وجود فراغ.
# Is all numeric

الاستخدام: تعليق يشير إلى أن السطر التالي سيتحقق مما إذا كانت السلسلة تتكون فقط من أرقام.
الغرض: لتوضيح ما يقوم به السطر التالي.
print(s.isnumeric())

الاستخدام: يقوم هذا السطر بطباعة قيمة منطقية تشير إلى ما إذا كانت السلسلة s تتكون فقط من أرقام باستخدام دالة isnumeric().
الغرض: لتوضيح كيفية التحقق مما إذا كانت السلسلة تحتوي فقط على أرقام، والتي تعود False لأن السلسلة تحتوي على أحرف.

خاتمة:
في هذا الدرس، قمنا باستكشاف مجموعة من الطرق المختلفة لمعالجة السلاسل النصية في بايثون. من خلال فهم هذه الطرق، يمكن للمبرمجين استخدام هذه الأساليب لتحسين كفاءة برامجهم في التعامل مع البيانات النصية. إن تعلم كيفية استخدام هذه الطرق سيساعدك في تطوير مهاراتك في البرمجة بلغة بايثون.