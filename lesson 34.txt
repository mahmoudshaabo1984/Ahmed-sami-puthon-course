**القسم السابع، الدرس 34: فهم عبارتي `break` و `continue` في حلقات بايثون**  
**محاضرة مقدمة من د. أحمد سامي**  

---

### **المقدمة**  
صباح الخير، طلابي الأعزاء. اليوم، في القسم السابع، الدرس 34، سنستكشف عبارتين أساسيتين للتحكم في تدفق البرامج في بايثون: `break` و`continue`. هاتان العبارتان تُستخدَمان لإدارة سلوك الحلقات (Loops)، سواءً لإنهاء الحلقة بشكل مُبكِّر أو لتخطي جزء من التكرارات. بنهاية هذه المحاضرة، ستتمكنون من استخدام هاتين العبارتين بفعالية في برامجكم. لنبدأ بتحليل الكود المقدم، الذي يوضح هذه المفاهيم.

---

### **الشرح التفصيلي**  

#### **1. عبارة `break`**  
تُستخدم `break` لإنهاء الحلقة بشكل فوري، حتى لو لم يكتمل شرط إنهاء الحلقة الأصلي. دعونا نفحص الجزء الأول من الكود سطرًا بسطر:

```python
# استخدام break
# break لإنهاء الحلقة
i = 0
x = 100

while i < x:
    print(i)
    i += 1
    if i == 3:
        break
```

1. **تهيئة المتغيرات**:  
   - `i = 0`: نُهيئ متغيرًا باسم `i` بقيمة `0` ليكون عدادًا للحلقة.  
   - `x = 100`: نُعرِّف متغيرًا باسم `x` بقيمة `100` كحد أقصى للحلقة.  

2. **شرط الحلقة**:  
   - `while i < x`: ستستمر الحلقة طالما أن قيمة `i` أقل من `x` (أي `100`).  

3. **جسم الحلقة**:  
   - `print(i)`: نطبع قيمة `i` الحالية.  
   - `i += 1`: نزيد قيمة `i` بمقدار `1` في كل تكرار.  

4. **شرط تنفيذ `break`**:  
   - `if i == 3`: نتحقق مما إذا وصلت قيمة `i` إلى `3`.  
   - `break`: إذا تحقق الشرط، تُنفَّذ `break`، مما ينهي الحلقة فورًا.  

**مثال على الناتج**:  
```
0
1
2
```  
**التفسير**:  
تبدأ الحلقة بقيمة `i = 0`، وتطبع `0`. ثم تزيد `i` إلى `1` وتطبع `1`. تتكرر العملية حتى تصل `i` إلى `3`، حيث تُنفَّذ `break`، فتنتهي الحلقة. لذلك، تُطبع الأرقام `0`، `1`، `2` فقط.

---

#### **2. عبارة `continue`**  
تُستخدم `continue` لتخطي باقي التعليمات في التكرار الحالي والانتقال إلى التكرار التالي. لنفحص الجزء الثاني من الكود:

```python
# استخدام continue
# continue لمواصلة الحلقة
i = 0
x = 100

while i < x:
    print(i)
    i += 1
    if i == 3:
        continue
```

1. **تهيئة المتغيرات**:  
   - `i = 0`: نُهيئ `i` بقيمة `0`.  
   - `x = 100`: نُعرِّف `x` بقيمة `100`.  

2. **شرط الحلقة**:  
   - `while i < x`: تستمر الحلقة طالما أن `i` أقل من `100`.  

3. **جسم الحلقة**:  
   - `print(i)`: نطبع قيمة `i`.  
   - `i += 1`: نزيد `i` بمقدار `1`.  

4. **شرط تنفيذ `continue`**:  
   - `if i == 3`: نتحقق من وصول `i` إلى `3`.  
   - `continue`: إذا تحقق الشرط، تُنفَّذ `continue`، فتتخطى أي تعليمات تليها في التكرار الحالي وتنتقل إلى التكرار التالي.  

**مثال على الناتج**:  
```
0
1
2
3
4
...
99
```  
**التفسير**:  
لا يؤثر استخدام `continue` هنا على الناتج النهائي لأنها تُنفَّذ **بعد** زيادة `i` وطباعتها. في كل الحالات، تطبع الحلقة جميع الأرقام من `0` إلى `99`. مع ذلك، إذا وُضعت `continue` **قبل** زيادة `i`، ستتسبب في تكرار لا نهائي عند `i = 2` (جربوا هذا كمثال إضافي!).

---

### **الخاتمة**  
باختصار، تُعد `break` و`continue` أدوات قوية للتحكم في تدفق الحلقات:  
- `break`: تنهي الحلقة فورًا.  
- `continue`: تخطي التكرار الحالي والانتقال إلى التالي.  

نصيحتي لكم: تدربوا على استخدام هاتين العبارتين مع حلقات `for` و`while`، وحاولوا تعديل الكود المقدم لرؤية النتائج المختلفة. كلما طبَّقتم أكثر، كلما اتضحت المفاهيم.  

شكرًا لانتباهكم، وأتمنى لكم تقدمًا مميزًا في رحلتكم البرمجية.  

---  
**نهاية المحاضرة**