عنوان المحاضرة: القسم 6، الدرس 32: المعاملات المنطقية والمقارنات في بايثون
المقدمة:
السلام عليكم ورحمة الله وبركاته، أيها الطلاب الأعزاء. أنا الدكتور أحمد سامي، وسنستكشف اليوم المعاملات المنطقية والمقارنات في بايثون. هذه المفاهيم أساسية لإنشاء شروط معقدة واتخاذ القرارات في برامجنا. دعونا نتناول كل مفهوم مع أمثلة.
المحتوى الرئيسي:

معاملات المقارنة الأساسية:

# == : يتحقق مما إذا كانت قيمتان متساويتين
# > : يتحقق مما إذا كانت القيمة اليسرى أكبر من القيمة اليمنى
# < : يتحقق مما إذا كانت القيمة اليسرى أصغر من القيمة اليمنى
# >= : يتحقق مما إذا كانت القيمة اليسرى أكبر من أو تساوي القيمة اليمنى
# <= : يتحقق مما إذا كانت القيمة اليسرى أصغر من أو تساوي القيمة اليمنى
# != : يتحقق مما إذا كانت قيمتان غير متساويتين
هذه المعاملات هي أساس المقارنات في بايثون. مثال:
x = 5
y = 10
print(x == y)  # False
print(x < y)   # True
print(x >= 5)  # True
print(x != y)  # True

المعامل 'and':

# and يجمع بين شرطين
x = 5
y = 10
if x > 2 and x < 10:
    print("صحيح")
هنا، يجب أن يكون كلا الشرطين صحيحين لتنفيذ الكود داخل جملة 'if'. في هذه الحالة، ستطبع "صحيح" لأن 5 أكبر من 2 وأقل من 10.

المعامل 'or':

# or يسمح بتنفيذ الكود إذا كان أحد الشرطين على الأقل صحيحًا
x = 5
y = 10
if x > 2 or x <= 10:
    print("صحيح")
مع 'or'، يكفي أن يكون أحد الشرطين صحيحًا. سيطبع "صحيح" لأن كلا الشرطين صحيحان في الواقع (5 > 2 و 5 <= 10).

المعامل 'not':

# not يعكس الشرط، مما يجعله صحيحًا إذا كان الشرط الأصلي خاطئًا
x = 5
y = 10
if not(x == y):
    print("خطأ")
'not' يعكس القيمة المنطقية. هنا، يطبع "خطأ" لأن x بالفعل ليست مساوية لـ y.

المعامل 'in':

# in يتحقق مما إذا كان عنصر موجودًا داخل تسلسل
name = "ahmed"
if "h" in name:
    print("h موجود في الاسم")
'in' يتحقق من العضوية. سيطبع "h موجود في الاسم" لأن 'h' موجود بالفعل في السلسلة "ahmed".

المعامل 'not in':

# not in يتحقق مما إذا كان عنصر غير موجود داخل تسلسل
name = "ahmed"
if "s" not in name:
    print("غير موجود")
'not in' هو عكس 'in'. يطبع "غير موجود" لأن 's' ليست موجودة في "ahmed".

المعامل 'is':

# is يتحقق مما إذا كان متغيران يشيران إلى نفس الكائن في الذاكرة
x = 5
y = 10
if x is y:
    print("صحيح")
'is' يتحقق من الهوية، وليس المساواة. هذا لن يطبع شيئًا لأن x و y هما كائنان مختلفان.

المعامل 'is not':

# is not يتحقق مما إذا كان متغيران لا يشيران إلى نفس الكائن في الذاكرة
x = 5
y = 10
if x is not y:
    print("x ليست y")
'is not' هو عكس 'is'. هذا سيطبع "x ليست y" لأن x و y هما بالفعل كائنان مختلفان.
الخاتمة:
اليوم، استكشفنا مختلف المعاملات المنطقية والمقارنات في بايثون. هذه الأدوات ضرورية لبناء منطق معقد في برامجكم وإجراء مقارنات دقيقة. تذكروا أن الممارسة هي المفتاح لإتقان هذه المفاهيم. أشجعكم على تجربة هذه المعاملات في مشاريعكم الخاصة لفهم كيفية عملها بشكل أفضل.
شكرًا لكم على حسن استماعكم. هل لديكم أي أسئلة حول ما ناقشناه اليوم؟