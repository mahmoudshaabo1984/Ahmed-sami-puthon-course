




الدرس 45

انشاء شاشة اللعبة 
وضع عنوان للعبة 
وضع لون 
وضع عرض وطول 
ايقاف التحديثات لأداء افضل
تحديث الشاشة بشكل يدوي 


الدرس 46 
انشاء المضرب الأول المضرب الشمال 
انشءا رسم المضرب على الشاشة 


تحديد شكل المضرب الأول الشمال  كمربع 
تحديد لون المضرب الأول 
الى اللون الأزرق
تجاهل  الخطوط عند عنتقال المضارب


نفس الأمور التي فعلنها في المضرب الأول سوف نقوم بالقيام في ها في المضرب الثاني 
المضرب اليمين 


هنا قمنا بأنشاء الكرة 
انشءنا السرعة لأقصصى حد
انشءنا شكل المربع للكرة 

انشءنا الون الأبيض للكرة 
انشنا دالة تمنع الرسم  على الشاشة 

وضعنا الكرة في منتصف الشاشة 



الدرس 47

في هذا الدرس سوف نقوم بأنشاء عدة دوال
وظيفة هذه الدوال تحريك المضارب 
على المحور السيني x 
ولمحور الصاضي y


ايضا قمنا بأنشاء مفاتيح التحرك للمضرب الأول والمضرب  الثاني 





الدرس 48 
تحريك الكرة على x and y 
x تحريك افقي محور سيني 
y تحريك عامودي محور صاضي 



هنا وضعنا سرعة الكرة 1.5


هنا قمنا بأنشاء  دوال لتحريك الكرة في الحلقة الأساسية للعبة 

الدرس 49 
في هذا الدرس سنقوم بالتحقق من حركة التصاضم بين المضربين 




بالتأكيد، هذا شرح مفصل للصورة على شكل ملاحظات لمساعدتك في الدرس.

-----

### **شرح منطق اصطدام الكرة بالمضرب الأيمن (Lesson 49)**

الصورة تشرح الشروط البرمجية اللازمة لاكتشاف اصطدام الكرة بالمضرب الأيمن (الأحمر) في لعبة Ping Pong. لكي يعتبر الاصطدام صحيحاً، يجب أن يتحقق شرطان في نفس الوقت: **الشرط الأفقي (محور X)** و **الشرط العمودي (محور Y)**.

#### **1. التحقق الأفقي (على محور X)**

هذا الشرط يتأكد من أن الكرة في المكان الأفقي الصحيح لتصطدم بالمضرب.

**الكود:**

```python
if (ball.xcor() > 340 and ball.xcor() < 350)
```

  * **`ball.xcor() > 340`**:

      * كما هو موضح في الرسم، الوجه الأمامي للمضرب الأحمر يقع عند الإحداثي `x = 340`.
      * هذا الجزء من الشرط يتحقق مما إذا كانت الكرة قد تجاوزت الخط الأمامي للمضرب (أي أن إحداثياتها على محور x أكبر من 340).

  * **`ball.xcor() < 350`**:

      * مركز المضرب الأحمر يقع عند `x = 350`.
      * هذا الجزء من الشرط يتأكد من أن الكرة لم تدخل "داخل" المضرب أو تتجاوزه.
      * **الخلاصة**: هذا الشرط المزدوج يعني أن مركز الكرة يجب أن يكون في "منطقة الاصطدام" الأفقية، وهي شريحة ضيقة عرضها 10 بكسل تقع مباشرة أمام المضرب.

#### **2. التحقق العمودي (على محور Y)**

بعد التأكد من أن الكرة في المكان الأفقي الصحيح، يجب التأكد من أنها على الارتفاع الصحيح لتصطدم بالمضرب (ليست أعلى منه أو أسفل منه).

**الكود:**

```python
(ball.ycor() < madrab2.ycor() + 40 and ball.ycor() > madrab2.ycor() - 40)
```

*ملاحظة: `madrab2` هو اسم المتغير للمضرب الأحمر.*

  * **`madrab2.ycor()`**: هذه هي نقطة المنتصف (المركز) للمضرب الأحمر على المحور العمودي Y.

  * **`ball.ycor() < madrab2.ycor() + 40`**:

      * `madrab2.ycor() + 40` يمثل الحد العلوي لسطح المضرب الذي يمكن للكرة أن تصطدم به (مركز المضرب + 40 بكسل للأعلى).
      * هذا الشرط يتأكد من أن الكرة ليست أعلى من الجزء العلوي للمضرب.

  * **`ball.ycor() > madrab2.ycor() - 40`**:

      * `madrab2.ycor() - 40` يمثل الحد السفلي لسطح المضرب (مركز المضرب - 40 بكسل للأسفل).
      * هذا الشرط يتأكد من أن الكرة ليست أسفل من الجزء السفلي للمضرب.

  * **لماذا 40 وليس 50؟**:

      * في الرسم، يظهر أن ارتفاع المضرب 100 بكسل (من -50 إلى +50 بالنسبة للمركز). استخدام `40` بدلاً من `50` في الكود يجعل منطقة الاصطدام أصغر قليلاً من الحجم الفعلي للمضرب. هذا يجعل اللعبة أكثر واقعية قليلاً، حيث يجب أن تصطدم الكرة بالجزء الرئيسي من المضرب وليس بحوافه تماماً.

#### **النتيجة النهائية**

يتم دمج الشرطين معاً باستخدام `and`. هذا يعني أنه لكي يتم تسجيل الاصطدام، يجب أن تكون **جميع الشروط الأربعة صحيحة في نفس اللحظة**.
إذا تحققت الشروط، يتم تنفيذ الكود الذي يجعل الكرة ترتد، وهو عادةً عكس اتجاهها الأفقي (`ball.dx *= -1`).






الدرس 50 

وضع سكور  للاعبين 



بالتأكيد، هذه هي الملاحظات الخاصة بالدرس 50 حول كيفية عمل نظام النقاط (Score) في الكود الكامل.

-----

### **ملاحظات الدرس 50: إضافة وتحديث نظام النقاط (Score)**

الهدف من هذا الدرس هو إنشاء نظام لتسجيل النقاط وعرضها على الشاشة، وتحديثها تلقائياً عندما يسجل أحد اللاعبين نقطة. يتم ذلك عبر ثلاث خطوات رئيسية: **الإعداد الأولي**، **تسجيل النقاط**، و**تحديث العرض**.

#### **1. الإعداد الأولي (Initialization)**

قبل بدء اللعبة، نحتاج إلى تجهيز كل ما يتعلق بالنقاط.

  * **إنشاء متغيرات لتخزين النقاط:**

    ```python
    score1 = 0 # Variable to store player 1's score
    score2 = 0 # Variable to store player 2's score
    ```

      - نبدأ بإنشاء متغيرين، `score1` و `score2`، وتعيين قيمتهما الأولية إلى `0`. هذه المتغيرات ستحتفظ بنقاط كل لاعب طوال اللعبة.

  * **إنشاء كائن Turtle لعرض النص:**

    ```python
    score = turtle.Turtle() # Create a turtle object for the scoreboard
    score.speed(0)
    score.color("white")
    score.penup()
    score.hideturtle() # Hide the turtle object, we only need the text
    score.goto(0, 260) # Position the scoreboard at the top center
    ```

      - نحن نستخدم كائن Turtle جديد اسمه `score` ليس لرسم أشكال، بل **لكتابة النص** على الشاشة.
      - `hideturtle()`: نخفي شكل السلحفاة لأننا نريد فقط رؤية النص الذي ستكتبه.
      - `goto(0, 260)`: نضعها في أعلى منتصف الشاشة.

  * **كتابة النتيجة الأولية:**

    ```python
    score.write(f"Player 1: {score1}  Player 2: {score2}", align="center", font=("Courier", 24, "normal"))
    ```

      - هذا السطر يقوم بكتابة النتيجة على الشاشة **مرة واحدة فقط** عند بدء تشغيل اللعبة.
      - يستخدم f-string لعرض قيم `score1` و `score2` (التي هي 0 في البداية).

#### **2. منطق تسجيل النقاط (Scoring Logic)**

يتم وضع هذا المنطق داخل حلقة اللعبة الرئيسية (`while True`) لأنه يجب التحقق منه باستمرار.

  * **التحقق من تسجيل اللاعب الأول (الأزرق):**

    ```python
    if ball.xcor() > 390: # Check if ball passed the right border
        # ... (reset ball position) ...
        score1 += 1 # Player 1 scores a point
        # ... (update display) ...
    ```

      - عندما تتجاوز الكرة الإحداثي `x = 390`، فهذا يعني أن اللاعب الثاني (الأحمر) قد أخطأ، وبالتالي تُحتسب نقطة للاعب الأول.
      - `score1 += 1` هي اختصار لـ `score1 = score1 + 1`.

  * **التحقق من تسجيل اللاعب الثاني (الأحمر):**

    ```python
    if ball.xcor() < -390: # Check if ball passed the left border
        # ... (reset ball position) ...
        score2 += 1 # Player 2 scores a point
        # ... (update display) ...
    ```

      - عندما تتجاوز الكرة الإحداثي `x = -390`، فهذا يعني أن اللاعب الأول (الأزرق) قد أخطأ، وتُحتسب نقطة للاعب الثاني.

#### **3. تحديث عرض النتيجة (Updating the Display)**

بعد زيادة قيمة المتغير (`score1` أو `score2`)، يجب تحديث النص على الشاشة ليعكس النتيجة الجديدة.

  * **مسح النص القديم:**

    ```python
    score.clear() # Clear the old score
    ```

      - هذا الأمر **ضروري جداً**. يقوم بمسح كل ما كتبه الكائن `score` سابقاً. بدون هذا السطر، سيتم كتابة النتائج الجديدة فوق القديمة، مما يؤدي إلى تداخل النص.

  * **كتابة النص الجديد:**

    ```python
    score.write(f"Player 1: {score1}  Player 2: {score2}", align="center", font=("Courier", 24, "normal"))
    ```

      - نعيد استخدام نفس أمر `write` لكتابة النتيجة مرة أخرى، ولكن هذه المرة سيعرض القيم المحدثة للمتغيرات `score1` و `score2`.

وهكذا، مع كل نقطة يتم تسجيلها، يتم تحديث المتغير، ثم مسح الشاشة من النص القديم، ثم كتابة النص الجديد بالقيم المحدثة.


